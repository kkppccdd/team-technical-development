{"paragraphs":[{"text":"%md\n# Code Quality Weekly Report\n\n## Summary\nWe are analysising and collecting code quality data via [SonarQueue](http://www.sonarqube.org), we categorize the code quality issue by **rule**. Then count the issue by rule, in order to find the top contributors to the **Tech Debt**.","dateUpdated":"Mar 6, 2016 4:19:27 PM","config":{"colWidth":12,"graph":{"mode":"table","height":156,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457097775540_-580629830","id":"20160304-212255_754210432","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Code Quality Weekly Report</h1>\n<h2>Summary</h2>\n<p>We are analysising and collecting code quality data via <a href=\"http://www.sonarqube.org\">SonarQueue</a>, we categorize the code quality issue by <strong>rule</strong>. Then count the issue by rule, in order to find the top contributors to the <strong>Tech Debt</strong>.</p>\n"},"dateCreated":"Mar 4, 2016 9:22:55 PM","dateStarted":"Mar 6, 2016 4:19:27 PM","dateFinished":"Mar 6, 2016 4:19:27 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:845","focus":true},{"text":"%dep\nz.addRepo(\"CentralcRepo\").url(\"http://central.maven.org/maven2\")\nz.load(\"com.typesafe.play:play-json_2.10:2.4.6\")","dateUpdated":"Mar 6, 2016 4:20:59 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457098300237_-1281494541","id":"20160304-213140_55944848","result":{"code":"SUCCESS","type":"TEXT","msg":"res0: org.apache.zeppelin.spark.dep.Dependency = org.apache.zeppelin.spark.dep.Dependency@1d050004\n"},"dateCreated":"Mar 4, 2016 9:31:40 PM","dateStarted":"Mar 6, 2016 4:20:59 PM","dateFinished":"Mar 6, 2016 4:21:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:846","focus":true},{"text":"val sonarRestEndPoint = \"https://nemo.sonarqube.org/\"\nval projectKeys = List(\"org.activiti:activiti-root\")\nval issueStatuses = List(\"OPEN\",\"CONFIRMED\",\"REOPENED\")\nval matchedIssueJsonDataFilePath=\"/tmp/test.json\"","dateUpdated":"Mar 6, 2016 4:21:26 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457097783259_-829931793","id":"20160304-212303_245287022","result":{"code":"SUCCESS","type":"TEXT","msg":"sonarRestEndPoint: String = https://nemo.sonarqube.org/\nprojectKeys: List[String] = List(org.activiti:activiti-root)\nissueStatuses: List[String] = List(OPEN, CONFIRMED, REOPENED)\nmatchedIssueJsonDataFilePath: String = /tmp/test.json\n"},"dateCreated":"Mar 4, 2016 9:23:03 PM","dateStarted":"Mar 6, 2016 4:21:26 PM","dateFinished":"Mar 6, 2016 4:21:52 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:847","focus":true},{"text":"//https://nemo.sonarqube.org/api/timemachine/index?resource=org.activiti:activiti-root&metrics=ncloc,sqale_index&fromDateTime=2010-12-25T23:59:59+0100\n","dateUpdated":"Mar 6, 2016 4:19:27 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457249391040_463637167","id":"20160306-152951_1740393934","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Mar 6, 2016 3:29:51 PM","dateStarted":"Mar 6, 2016 4:19:29 PM","dateFinished":"Mar 6, 2016 4:19:30 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:848"},{"text":"\n\nimport org.apache.spark._\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\n\nimport play.api.libs.json.{Json,JsArray}\n\nval startDate = \"2015-11-30\"\n\ndef loadIssue(sonarRestEndPoint:String,projectKeys:List[String],issueStatuses:List[String])={\n  val facets=List(\"severities\",\"statuses\",\"rules\")\n  val queryString = \"?createdAfter=\"+startDate+\"&facets=\"+facets.mkString(\",\")+\"&componentKeys=\"+projectKeys.mkString(\",\")+\"&statuses=\"+issueStatuses.mkString(\",\")\n  val searchIssueApi = \"api/issues/search\"\n  val searchIssueQueryString = sonarRestEndPoint+searchIssueApi+queryString\n  val countIssueResult = scala.io.Source.fromURL(searchIssueQueryString+\"&p=1&ps=10\").mkString\n  val countIssueResultJson = Json.parse(countIssueResult)\n  val issueTotal = (countIssueResultJson \\ \"paging\" \\ \"total\").as[Int]\n  val pageSize = 100\n  var lastPageIndex = {\n    if(issueTotal % pageSize ==0){\n      issueTotal/ pageSize\n    }else{\n      issueTotal/pageSize + 1\n    }\n  }\n  val allIssues = List.range(1,lastPageIndex+1).map {\n    pageIndex =>\n    val searchIssuePageResult = scala.io.Source.fromURL(searchIssueQueryString+\"&p=\"+pageIndex+\"&ps=\"+pageSize).mkString\n    val searchIssuePageResultJson = Json.parse(searchIssuePageResult)\n    val issues = (searchIssuePageResultJson \\ \"issues\").as[JsArray].value\n    issues\n  }\n  \n  allIssues.flatten\n}\n\n\n\n\nval matchedIssues = loadIssue(sonarRestEndPoint,projectKeys,issueStatuses)\nimport java.io._\n\nval pw = new PrintWriter(new File(matchedIssueJsonDataFilePath))\n\nmatchedIssues.map {\n  issueJsonValue => \n    pw.write(Json.stringify(issueJsonValue))\n    pw.write(\"\\r\\n\")\n}\npw.close()\n\n","dateUpdated":"Mar 6, 2016 4:21:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457097821381_-1069802213","id":"20160304-212341_434124889","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark._\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport play.api.libs.json.{Json, JsArray}\nstartDate: String = 2015-11-30\nloadIssue: (sonarRestEndPoint: String, projectKeys: List[String], issueStatuses: List[String])List[play.api.libs.json.JsValue]\nmatchedIssues: List[play.api.libs.json.JsValue] = List({\"key\":\"AVM_XTackL024gXnJbz1\",\"rule\":\"squid:S1161\",\"severity\":\"MAJOR\",\"component\":\"org.activiti:activiti-engine:src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryImpl.java\",\"componentId\":328312,\"project\":\"org.activiti:activiti-root\",\"subProject\":\"org.activiti:activiti-engine\",\"line\":296,\"textRange\":{\"startLine\":296,\"endLine\":296,\"startOffset\":38,\"endOffset\":54},\"flows\":[],\"status\":\"OPEN\",\"message\":\"Add the \\\"@Override\\\" annotation above this method signature\",\"debt\":\"5min\",\"author\":\"joram.barrez@gmail.com\",\"tags\":[\"bad-practice\"],\"creationDate\":\"2016-03-04T02:59:44+0100\",\"updateDate\":\"2016-03-04T02:59:44+0100\"}, {\"key\":\"AVM_XTfrkL024gXnJbz2\",\"rule\":\"squid:S1161\",\"severity\":\"MAJOR\",\"component\":\"org.activiti:activiti-...import java.io._\npw: java.io.PrintWriter = java.io.PrintWriter@5d77915b\nres12: List[Unit] = List((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ..."},"dateCreated":"Mar 4, 2016 9:23:41 PM","dateStarted":"Mar 6, 2016 4:21:56 PM","dateFinished":"Mar 6, 2016 4:22:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:849","focus":true},{"text":"%spark\n\nimport org.apache.spark.sql.functions._\n\nval issues = sqlContext.read.json(matchedIssueJsonDataFilePath)\n\n//println(issues.count())\n\nval datePn = \"\"\"(\\d+)d\"\"\".r\nval hourPn = \"\"\"(\\d+)h\"\"\".r\nval minPn = \"\"\"(\\d+)min\"\"\".r\n\n\nval debt2Min:(String => Int) = (debt: String) =>{\n  val dateNum = (datePn findFirstMatchIn debt map {x=>Integer.parseInt(x.group(1))} getOrElse {0})\n  val hourNum = (hourPn findFirstMatchIn debt map {x=>Integer.parseInt(x.group(1))} getOrElse {0})\n  val minNum = (minPn findFirstMatchIn debt map {x=>Integer.parseInt(x.group(1))} getOrElse {0})\n  \n  dateNum*24*60 + hourNum*60 + minNum\n}\nval convertFun = udf(debt2Min)\n//val normalizedIssues = issues.withColumn(\"debt_min\",convertFun(col(\"debt\")))\n//normalizedIssues.groupBy(\"rule\").agg(sum(\"debt_min\")).show()\n\nval normalizedIssues = issues.withColumn(\"debt_min\",convertFun(col(\"debt\")))\n//normalizedIssues.show(2)\nval debtContributionStats = normalizedIssues.groupBy(\"rule\").agg(sum(\"debt_min\")).orderBy(desc(\"sum(debt_min)\"))\ndebtContributionStats.registerTempTable(\"debtContributionStats\")","dateUpdated":"Mar 6, 2016 4:22:29 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457097842901_1971683815","id":"20160304-212402_1438252149","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.sql.functions._\nissues: org.apache.spark.sql.DataFrame = [author: string, component: string, componentId: bigint, creationDate: string, debt: string, flows: array<struct<locations:array<struct<msg:string,textRange:struct<endLine:bigint,endOffset:bigint,startLine:bigint,startOffset:bigint>>>>>, key: string, line: bigint, message: string, project: string, rule: string, severity: string, status: string, subProject: string, tags: array<string>, textRange: struct<endLine:bigint,endOffset:bigint,startLine:bigint,startOffset:bigint>, updateDate: string]\ndatePn: scala.util.matching.Regex = (\\d+)d\nhourPn: scala.util.matching.Regex = (\\d+)h\nminPn: scala.util.matching.Regex = (\\d+)min\ndebt2Min: String => Int = <function1>\nconvertFun: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,List(StringType))\nnormalizedIssues: org.apache.spark.sql.DataFrame = [author: string, component: string, componentId: bigint, creationDate: string, debt: string, flows: array<struct<locations:array<struct<msg:string,textRange:struct<endLine:bigint,endOffset:bigint,startLine:bigint,startOffset:bigint>>>>>, key: string, line: bigint, message: string, project: string, rule: string, severity: string, status: string, subProject: string, tags: array<string>, textRange: struct<endLine:bigint,endOffset:bigint,startLine:bigint,startOffset:bigint>, updateDate: string, debt_min: int]\ndebtContributionStats: org.apache.spark.sql.DataFrame = [rule: string, sum(debt_min): bigint]\n"},"dateCreated":"Mar 4, 2016 9:24:02 PM","dateStarted":"Mar 6, 2016 4:22:29 PM","dateFinished":"Mar 6, 2016 4:22:34 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:850","focus":true},{"text":"%md\n## Top Contributor to Tech Debt\nTop 10 contributors:\n","dateUpdated":"Mar 6, 2016 4:38:47 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457099426711_-32620990","id":"20160304-215026_1725854358","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Top Contributor to Tech Debt</h2>\n<p>Top 10 contributors:</p>\n"},"dateCreated":"Mar 4, 2016 9:50:26 PM","dateStarted":"Mar 6, 2016 4:38:47 PM","dateFinished":"Mar 6, 2016 4:38:47 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:851","focus":true},{"text":"%sql\n\nSELECT * from debtContributionStats limit 10","dateUpdated":"Mar 6, 2016 4:38:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"rule","index":0,"aggr":"sum"}],"values":[{"name":"sum(debt_min)","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"rule","index":0,"aggr":"sum"},"yAxis":{"name":"sum(debt_min)","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457099902462_1606298766","id":"20160304-215822_1702254034","result":{"code":"SUCCESS","type":"TABLE","msg":"rule\tsum(debt_min)\nsquid:MaximumInheritanceDepth\t3360\ncommon-java:DuplicatedBlocks\t710\nsquid:S1161\t410\nsquid:S2583\t315\nsquid:S2142\t240\nsquid:S2259\t200\nsquid:S134\t170\nsquid:MethodCyclomaticComplexity\t130\nsquid:S1854\t75\nsquid:S1313\t60\n","comment":"","msgTable":[[{"key":"sum(debt_min)","value":"squid:MaximumInheritanceDepth"},{"key":"sum(debt_min)","value":"3360"}],[{"value":"common-java:DuplicatedBlocks"},{"value":"710"}],[{"value":"squid:S1161"},{"value":"410"}],[{"value":"squid:S2583"},{"value":"315"}],[{"value":"squid:S2142"},{"value":"240"}],[{"value":"squid:S2259"},{"value":"200"}],[{"value":"squid:S134"},{"value":"170"}],[{"value":"squid:MethodCyclomaticComplexity"},{"value":"130"}],[{"value":"squid:S1854"},{"value":"75"}],[{"value":"squid:S1313"},{"value":"60"}]],"columnNames":[{"name":"rule","index":0,"aggr":"sum"},{"name":"sum(debt_min)","index":1,"aggr":"sum"}],"rows":[["squid:MaximumInheritanceDepth","3360"],["common-java:DuplicatedBlocks","710"],["squid:S1161","410"],["squid:S2583","315"],["squid:S2142","240"],["squid:S2259","200"],["squid:S134","170"],["squid:MethodCyclomaticComplexity","130"],["squid:S1854","75"],["squid:S1313","60"]]},"dateCreated":"Mar 4, 2016 9:58:22 PM","dateStarted":"Mar 6, 2016 4:38:49 PM","dateFinished":"Mar 6, 2016 4:38:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:852","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457252367895_1998753804","id":"20160306-161927_2092499658","dateCreated":"Mar 6, 2016 4:19:27 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:854","dateUpdated":"Mar 6, 2016 4:39:32 PM","dateFinished":"Mar 6, 2016 4:39:32 PM","dateStarted":"Mar 6, 2016 4:39:32 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Sharing of Top 10 contributors:</p>\n"},"text":"%md\nSharing of Top 10 contributors:\n","focus":true},{"config":{"colWidth":12,"graph":{"mode":"pieChart","height":274,"optionOpen":false,"keys":[{"name":"rule","index":0,"aggr":"sum"}],"values":[{"name":"sum(debt_min)","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"rule","index":0,"aggr":"sum"},"yAxis":{"name":"sum(debt_min)","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457253374479_1784285034","id":"20160306-163614_1590624280","dateCreated":"Mar 6, 2016 4:36:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1154","text":"%sql\nSELECT * from debtContributionStats limit 10","dateUpdated":"Mar 6, 2016 4:39:59 PM","dateFinished":"Mar 6, 2016 4:39:35 PM","dateStarted":"Mar 6, 2016 4:39:34 PM","result":{"code":"SUCCESS","type":"TABLE","msg":"rule\tsum(debt_min)\nsquid:MaximumInheritanceDepth\t3360\ncommon-java:DuplicatedBlocks\t710\nsquid:S1161\t410\nsquid:S2583\t315\nsquid:S2142\t240\nsquid:S2259\t200\nsquid:S134\t170\nsquid:MethodCyclomaticComplexity\t130\nsquid:S1854\t75\nsquid:S1313\t60\n","comment":"","msgTable":[[{"key":"sum(debt_min)","value":"squid:MaximumInheritanceDepth"},{"key":"sum(debt_min)","value":"3360"}],[{"value":"common-java:DuplicatedBlocks"},{"value":"710"}],[{"value":"squid:S1161"},{"value":"410"}],[{"value":"squid:S2583"},{"value":"315"}],[{"value":"squid:S2142"},{"value":"240"}],[{"value":"squid:S2259"},{"value":"200"}],[{"value":"squid:S134"},{"value":"170"}],[{"value":"squid:MethodCyclomaticComplexity"},{"value":"130"}],[{"value":"squid:S1854"},{"value":"75"}],[{"value":"squid:S1313"},{"value":"60"}]],"columnNames":[{"name":"rule","index":0,"aggr":"sum"},{"name":"sum(debt_min)","index":1,"aggr":"sum"}],"rows":[["squid:MaximumInheritanceDepth","3360"],["common-java:DuplicatedBlocks","710"],["squid:S1161","410"],["squid:S2583","315"],["squid:S2142","240"],["squid:S2259","200"],["squid:S134","170"],["squid:MethodCyclomaticComplexity","130"],["squid:S1854","75"],["squid:S1313","60"]]}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457253381385_2041697373","id":"20160306-163621_1462660290","dateCreated":"Mar 6, 2016 4:36:21 PM","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1173"}],"name":"CodeQualityReport","id":"2BF6QNDEF","angularObjects":{"2BEYCUSUH":[],"2BE35ZSP4":[],"2BE73VUX3":[],"2BE3M1KM9":[],"2BEXANGS9":[],"2BD7SJZ6V":[],"2BF75DRQU":[],"2BDW19ZKQ":[],"2BFY7BQV4":[],"2BEFJQ9TT":[],"2BEX895ZA":[],"2BDU6W697":[],"2BDNAF8JC":[],"2BE3ZGWW6":[]},"config":{"looknfeel":"default"},"info":{}}